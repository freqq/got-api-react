{"version":3,"sources":["components/Button/Button.styles.tsx","components/Button/index.ts","components/Button/Button.tsx","utils/RequestService.tsx","handlers/apiHandler.ts","actions/charactersActions.ts","pages/CharactersPage.tsx","pages/HousePage.tsx","Router.tsx","routes.ts","reducers/charactersReducer.ts","actions/houseActions.ts","reducers/houseReducer.ts","store.ts","App.tsx","index.tsx"],"names":["ButtonWrapper","styled","button","Button","text","axiosInstance","get","url","params","this","axios","create","headers","defaults","baseURL","getListOfCharacters","a","RequestService","LIST_OF_CHARACTERS_LOADING","LIST_OF_CHARACTERS_OK","LIST_OF_CHARACTERS_FAIL","fetchListOfCharacters","dispatch","type","then","res","charactersList","data","payload","catch","withRouter","connect","state","characters","isFetching","isError","fetchListOfCharactersFunc","useEffect","JSON","stringify","HousePage","Router","exact","path","component","CharactersPage","REDUCER_INITIAL_STATE","perPage","textFilter","HOUSE_DATA_LOADING","HOUSE_DATA_OK","HOUSE_DATA_FAIL","undefined","history","createBrowserHistory","middleware","thunkMiddleware","routerMiddleware","composeEnhancers","compose","rootReducer","combineReducers","router","connectRouter","stateDefinition","house","housesData","store","createStore","applyMiddleware","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0691188.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.button`\n  padding: 10px;\n  font-size: 12px;\n  border-radius: 4px;\n  outline: none;\n  background: none;\n  border: 1px solid #333;\n`;\n","import Button from 'components/Button/Button';\n\nexport default Button;\n","import React from 'react';\n\nimport { ButtonWrapper } from 'components/Button/Button.styles';\n\nconst Button: React.FC<Props> = ({ text }: Props) => <ButtonWrapper>{text}</ButtonWrapper>;\n\ninterface Props {\n  text: string;\n}\n\nexport default Button;\n","import axios, { AxiosInstance, AxiosResponse } from 'axios';\n\nconst PROTOCOL = 'https';\nconst DOMAIN = 'anapioficeandfire.com';\nconst JSON_CONTENT_TYPE = 'application/json';\nconst XML_REQUESTED_WITH = 'XMLHttpRequest';\n\nclass RequestService {\n  axiosInstance: AxiosInstance;\n\n  constructor() {\n    this.axiosInstance = axios.create({\n      headers: {\n        'Content-Type': JSON_CONTENT_TYPE,\n        'X-Requested-With': XML_REQUESTED_WITH,\n      },\n    });\n\n    this.axiosInstance.defaults.baseURL = `${PROTOCOL}://${DOMAIN}/api`;\n  }\n\n  get = (url: string, params: any = {}): Promise<AxiosResponse> =>\n    this.axiosInstance.get(url, {\n      ...params,\n    });\n}\n\nexport default new RequestService();\n","import { AxiosResponse } from 'axios';\nimport RequestService from 'utils/RequestService';\n\nexport const getListOfCharacters = async (): Promise<AxiosResponse> =>\n  RequestService.get('/characters');\n\nexport const getHouseData = async (houseId: string): Promise<AxiosResponse> =>\n  RequestService.get(`/house/${houseId}`);\n","import { getListOfCharacters } from 'handlers/apiHandler';\nimport { ActionInterface, Character, ThunkResult } from 'common/types';\n\nexport const LIST_OF_CHARACTERS_LOADING = 'LIST_OF_CHARACTERS_LOADING';\nexport const LIST_OF_CHARACTERS_OK = 'LIST_OF_CHARACTERS_OK';\nexport const LIST_OF_CHARACTERS_FAIL = 'LIST_OF_CHARACTERS_FAIL';\n\nexport const makeListOfCharactersLoading = (): ActionInterface => ({\n  type: LIST_OF_CHARACTERS_LOADING,\n});\n\nexport const makeListOfCharactersFail = (): ActionInterface => ({\n  type: LIST_OF_CHARACTERS_FAIL,\n});\n\nexport const makeListOfCharactersOk = (charactersList: Character[]): ActionInterface => ({\n  type: LIST_OF_CHARACTERS_OK,\n  payload: { charactersList },\n});\n\nexport const fetchListOfCharacters = (): ThunkResult<Promise<void>> => dispatch => {\n  dispatch(makeListOfCharactersLoading());\n\n  return getListOfCharacters()\n    .then((res: any) => {\n      dispatch(makeListOfCharactersOk(res.data));\n    })\n    .catch(() => {\n      dispatch(makeListOfCharactersFail());\n    });\n};\n","import React, { useEffect } from 'react';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { Action } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport Button from 'components/Button';\nimport { fetchListOfCharacters } from 'actions/charactersActions';\nimport { IApplicationStore } from 'store';\nimport { Character } from 'common/types';\n\nconst CharactersPage: React.FC<Props> = ({ fetchListOfCharactersFunc, charactersList }: Props) => {\n  useEffect(() => {\n    fetchListOfCharactersFunc();\n  }, []);\n\n  return (\n    <div>\n      <Button text=\"Example button\" />\n      {JSON.stringify(charactersList)}\n    </div>\n  );\n};\n\ninterface Props extends PropsState, PropsDispatch {}\n\ninterface PropsState {\n  charactersList: Character[];\n  isFetching: boolean;\n  isError: boolean;\n}\n\ninterface PropsDispatch {\n  fetchListOfCharactersFunc: () => void;\n}\n\nconst mapStateToProps = (state: IApplicationStore): PropsState => ({\n  charactersList: state.characters.data,\n  isFetching: state.characters.isFetching,\n  isError: state.characters.isError,\n});\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IApplicationStore, undefined, Action>,\n): PropsDispatch => ({\n  fetchListOfCharactersFunc: () => dispatch(fetchListOfCharacters()),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CharactersPage));\n","import React from 'react';\n\nconst HousePage = () => <div>HousePage</div>;\n\nexport default HousePage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { CHARACTERS_PAGE_URL, HOUSE_PAGE_URL } from 'routes';\n\nimport CharactersPage from 'pages/CharactersPage';\nimport HousePage from 'pages/HousePage';\n\nconst Router: React.FC = () => (\n  <Switch>\n    <Route exact path={CHARACTERS_PAGE_URL} component={CharactersPage} />\n    <Route exact path={HOUSE_PAGE_URL} component={HousePage} />\n  </Switch>\n);\n\nexport default Router;\n","export const CHARACTERS_PAGE_URL = '/';\nexport const HOUSE_PAGE_URL = '/house/:houseId';\n","import { ActionInterface, Character } from 'common/types';\nimport {\n  LIST_OF_CHARACTERS_LOADING,\n  LIST_OF_CHARACTERS_OK,\n  LIST_OF_CHARACTERS_FAIL,\n} from 'actions/charactersActions';\n\nexport interface ICharacters {\n  data: Character[];\n  isError: boolean;\n  isFetching: boolean;\n  perPage: number;\n  textFilter: string;\n}\n\nexport const REDUCER_INITIAL_STATE: ICharacters = {\n  data: [],\n  isError: false,\n  isFetching: true,\n  perPage: 10,\n  textFilter: '',\n};\n\nexport const characters = (state: ICharacters, { type, payload }: ActionInterface): ICharacters => {\n  const stateDefinition = typeof state === 'undefined' ? REDUCER_INITIAL_STATE : state;\n  switch (type) {\n    case LIST_OF_CHARACTERS_OK:\n      return {\n        ...stateDefinition,\n        isError: false,\n        isFetching: false,\n        data: payload.charactersList,\n      };\n    case LIST_OF_CHARACTERS_FAIL:\n      return { ...stateDefinition, isFetching: false, isError: true };\n    case LIST_OF_CHARACTERS_LOADING:\n      return { ...stateDefinition, isFetching: true, isError: false };\n    default:\n      return stateDefinition;\n  }\n};\n","import { getHouseData } from 'handlers/apiHandler';\nimport { ActionInterface, ThunkResult, House } from 'common/types';\n\nexport const HOUSE_DATA_LOADING = 'HOUSE_DATA_LOADING';\nexport const HOUSE_DATA_OK = 'HOUSE_DATA_OK';\nexport const HOUSE_DATA_FAIL = 'HOUSE_DATA_FAIL';\n\nexport const makeHouseDataLoading = (): ActionInterface => ({\n  type: HOUSE_DATA_LOADING,\n});\n\nexport const makeHouseDataFail = (): ActionInterface => ({\n  type: HOUSE_DATA_FAIL,\n});\n\nexport const makeHouseDataOk = (houseData: House): ActionInterface => ({\n  type: HOUSE_DATA_OK,\n  payload: { houseData },\n});\n\nexport const fetchHouseData =\n  (houseId: string): ThunkResult<Promise<void>> =>\n  dispatch => {\n    dispatch(makeHouseDataLoading());\n\n    return getHouseData(houseId)\n      .then((res: any) => {\n        dispatch(makeHouseDataOk(res.data));\n      })\n      .catch(() => {\n        dispatch(makeHouseDataFail());\n      });\n  };\n","import { ActionInterface, House } from 'common/types';\nimport { HOUSE_DATA_LOADING, HOUSE_DATA_OK, HOUSE_DATA_FAIL } from 'actions/houseActions';\n\nexport interface IHouse {\n  data?: House;\n  isError: boolean;\n  isFetching: boolean;\n}\n\nexport const REDUCER_INITIAL_STATE: IHouse = {\n  data: undefined,\n  isError: false,\n  isFetching: true,\n};\n\nexport const house = (state: IHouse, { type, payload }: ActionInterface): IHouse => {\n  const stateDefinition = typeof state === 'undefined' ? REDUCER_INITIAL_STATE : state;\n  switch (type) {\n    case HOUSE_DATA_OK:\n      return {\n        ...stateDefinition,\n        isError: false,\n        isFetching: false,\n        data: payload.housesData,\n      };\n    case HOUSE_DATA_FAIL:\n      return { ...stateDefinition, isFetching: false, isError: true };\n    case HOUSE_DATA_LOADING:\n      return { ...stateDefinition, isFetching: true, isError: false };\n\n    default:\n      return stateDefinition;\n  }\n};\n","import thunkMiddleware from 'redux-thunk';\nimport { createStore, combineReducers, applyMiddleware, compose, Reducer, AnyAction } from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\nimport { connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n\nimport { characters, ICharacters } from 'reducers/charactersReducer';\nimport { house, IHouse } from 'reducers/houseReducer';\n\nexport const history = createBrowserHistory();\n\nconst middleware = [thunkMiddleware, routerMiddleware(history)];\nlet composeEnhancers = compose;\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nexport interface IApplicationStore {\n  characters: ICharacters;\n  house: IHouse;\n}\n\nif (\n  process.env.NODE_ENV === 'development' &&\n  typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === 'function'\n)\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers<Reducer<IApplicationStore, AnyAction>>({\n  router: connectRouter(history),\n  characters,\n  house,\n});\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\n","import { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport Router from 'Router';\nimport { store, history } from 'store';\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Router />\n    </ConnectedRouter>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}